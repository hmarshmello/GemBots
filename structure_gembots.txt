GemBots/
│
├── api/                      # Core application package
│   ├── __init__.py          # Makes api a proper Python package
│   └── app.py               # Main Flask application file
│
├── public/                   # Static files and uploads
│   ├── css/
│   │   └── styles.css       # Global CSS styles with dark mode
│   │
│   └── uploads/             # File upload directories
│       ├── images/          # For image analysis
│       ├── audio/           # For audio processing
│       ├── video/           # For video analysis
│       └── pdf/             # For PDF processing
│           
├── templates/               # Flask HTML templates
│   ├── base.html           # Base template with navigation
│   ├── index.html          # Landing page
│   ├── single_prompt.html  # Single prompt interface
│   ├── image_text.html     # Image analysis interface
│   ├── interactive_chat.html # Interactive chat interface
│   ├── multi_image_prompt.html    # Multiple image analysis
│   ├── multimodal_audio.html      # Audio analysis interface
│   ├── multimodal_video_prompt.html # Video analysis interface
│   └── pdf_prompt.html            # PDF analysis interface
│
├── .env                    # Environment variables (not in git)
├── .gitignore             # Git ignore rules
├── render.yaml            # Render.com deployment configuration
├── requirements.txt       # Python dependencies
├── wsgi.py               # WSGI entry point
└── structure_gembots.txt # This file - project structure

Key Components:

1. Backend (api/):
   - Flask application
   - Route handlers
   - AI integration
   - File processing

2. Frontend (templates/, public/):
   - HTML templates
   - CSS styles
   - Static assets
   - Upload directories

3. Configuration:
   - render.yaml for deployment
   - requirements.txt for dependencies
   - .env for environment variables
   - wsgi.py for application entry point

4. Features:
   - Text generation
   - Image analysis
   - Audio processing
   - Video analysis
   - PDF processing
   - Dark/Light theme
   - File uploads
   - Interactive chat

5. Deployment (Render.com):
   - Python 3.11 runtime
   - Gunicorn web server
   - Auto-deployment
   - Environment variables
   - Health checks

Development Setup:
```bash
# 1. Clone repository
git clone <repository-url>
cd GemBots

# 2. Create virtual environment
python -m venv venv
source venv/bin/activate  # or `venv\Scripts\activate` on Windows

# 3. Install dependencies
pip install -r requirements.txt

# 4. Set up environment variables in .env
FLASK_SECRET_KEY=your_secret_key
GOOGLE_GENERATIVEAI_API_KEY=your_api_key

# 5. Run application
python wsgi.py
```

Production Deployment:
1. Push to GitHub
2. Connect to Render.com
3. Deploy using render.yaml configuration
4. Set environment variables in Render dashboard
5. Monitor deployment and logs
